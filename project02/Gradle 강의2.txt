[Gradle 웹 프로젝트 만들기]
1. servlet-api 의존 라이브러리를 추가한다.
=> 단 컴파일할 때만 참조하고 서버 배치에는 포함하지 않게 한다.
=> mvnrepository.com 에서 검색
providedCompile 'javax.servlet:javax.servlet-api:3.0.1'

[Gradle 스프링 MVC 프로젝트 만들기]
2. web.xml 파일에 "프론트 컨트롤러 서블릿"을 등록하기
=> Tomcat HOME 에서 긁어와 필요한 부분만 잘라내기
=> spring 문서에서 DispatcherServlet 설정 부분 참조.

  <servlet>
    <servlet-name>dispatch</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <!-- 스프링 설정 파일의 경로를 지정하지 않으면, 다음 경로의 파일을 찾는다. 규칙 => /WEB-INF/[서블릿이름]-servlet.xml 
      예 => /WEB-INF/dispatch-servlet.xml -->
    <!-- 스프링 설정 파일의 위치를 명시하기 -->
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>/WEB-INF/conf/dispatch-servlet.xml</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
    <servlet-name>dispatch</servlet-name>
    <url-pattern>*.do</url-pattern>
  </servlet-mapping>
  
2. 스프링 설정 파일 만들기
=> 스프링 문서에서 스프링 설정 파일의 예제를 복사해온다.
=> /WEB-INF/conf/dispatch-servlet.xml 파일에 붙여넣는다.

3. HelloController 페이지 컨트롤러 만들어 TEST

[게시판 만들기]
1. MySQL DBMS 설치

2. 스키마(데이터베이스) 생성
  => java83db
3. 사용자 생성 및 스키마 할당
  => java83/java83db
4.게시판 테이블 생성
  => example.sql 참조
5. Mybatis 사용 준비
1) Mybatis 의존 라이브러리 추가(build.gradle)
    => Mybatis =>  Mybatis 기본 라이브러리 
       Mybatis Spring => Spring Mybatis 연동 라이브러리
       MySQL-connector => MySQL jdbc 라이브러리(3개의 라이브러리)
2) gradle eclipse 실행

3) spring 설정파일에 mybatis 설정 정보 추가
  => /WEB-INF/conf/dispatch-servlet.xml 에 추가
  => Mybatis.org -> GitHub project 에서 spring doc(see doc) 참조
  1. DataSource 설정 : DB Connection Pool 객체
  2. TransactionManager 설정 : 트랜젝션 관리자
  3. SqlSessionFactoryBean 설정 : SqlSessionFactory 생성자
  4. MapperScannerConfigurer 설정 : Mybatis DAO 자동 생성 시키는 Generator
  5. Spring-jdbc api 설정 (build.gradle)
 
6. 테이블 당 한개의 VO 생성
   => Board 클래스 생성
   
7. DAO 클래스 생성
   => BoardDao 인터페이스 생성
   
8. Service 클래스 생성
    => BoardService 인터페이스 생성
    => BoardServiceImpl 구현체 생성 
    
9. SQL Mapper 파일 생성
    => BoardDao.xml 파일 생성
    
10. 게시판 페이지 Controller 생성
    => BoardController 클래스 생성
    
11. View Conponent 게시판 뷰 컴포넌트 생성
    => /board/list.jsp 생성
    => Gradle 설정 파일에 jstl 의존 라이브러리 추가(jstl 사용 위해)
    => gradle eclipse 실행
    
12. 기존의 ViewResolver 를 InternalResourceViewResolver(혹은 다른것)으로 교체한다
    => 사용자가 jsp 로 바로 접근 하면 안된다 따라서 WEB-INF 에 숨겨야 한다.
    => 이러면 경로가 복잡하다 이를 편하게 해준다.

13. 게시물 상세보기 구현
  => list.jsp 에서 제목에 링크를 건다.
  => BoardController 에  detail() 추가.(해당 메서드)
  => board/detail.jsp 생성.
  
14. 게시물 등록 구현
    => list.jsp 에서 등록 폼 만들기
    => form.jsp 추가
    => BoardController 에 add() 추가
    => BoardDao.xml에 insert SQL 추가
    
15. 게시물 변경 구현
    => BoardController 에 update() 메서드 추가
    => BoardDao.xml에 update SQL 추가
    => detail.jsp 변경
    
16. 게시물 삭제 구현
    => detail.jsp 변경
    => BoardController delete() 메서드 추가
    => BoardDao.xml 에 delete SQL 추가
    
17. Spring 설정 파일 분리(모듈화)
    => Front Controller 나 Page Controller 에서 공통으로 사용 할 객체는 
       root-context 로 분리해 관리한다.
    => web.xml 에 root context 를 관리할  ContextLoaderListener 를 추가한다.
    => root-context.xml 파일 생성
    => dispatch-servlet.xml 에서 웹과 관련 없는 객체는 root-context.xml 로 옮긴다.
 












